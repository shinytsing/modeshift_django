# Generated by Django 4.2.7 on 2025-08-31 16:51

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tools', '0069_add_nutrition_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='AchievementUnlockLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger_event', models.CharField(max_length=100, verbose_name='触发事件')),
                ('unlock_data', models.JSONField(default=dict, verbose_name='解锁数据')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='解锁时间')),
            ],
            options={
                'verbose_name': '成就解锁日志',
                'verbose_name_plural': '成就解锁日志',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BodyPart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('chest', '胸部'), ('back', '背部'), ('shoulders', '肩部'), ('arms', '手臂'), ('legs', '腿部'), ('core', '核心'), ('glutes', '臀部'), ('calves', '小腿'), ('forearms', '前臂'), ('neck', '颈部'), ('full_body', '全身')], max_length=20, unique=True, verbose_name='部位名称')),
                ('display_name', models.CharField(max_length=50, verbose_name='显示名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='部位描述')),
                ('icon', models.CharField(default='fas fa-dumbbell', max_length=50, verbose_name='图标')),
                ('color', models.CharField(default='#667eea', max_length=7, verbose_name='主题色')),
                ('sort_order', models.IntegerField(default=0, verbose_name='排序')),
            ],
            options={
                'verbose_name': '身体部位',
                'verbose_name_plural': '身体部位',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ChatNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False, verbose_name='是否已读')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='阅读时间')),
            ],
            options={
                'verbose_name': '聊天通知',
                'verbose_name_plural': '聊天通知',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatRoomMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', '房主'), ('admin', '管理员'), ('member', '成员'), ('guest', '访客')], default='member', max_length=20, verbose_name='角色')),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name='加入时间')),
                ('last_read', models.DateTimeField(auto_now_add=True, verbose_name='最后阅读时间')),
                ('is_muted', models.BooleanField(default=False, verbose_name='是否禁言')),
                ('is_banned', models.BooleanField(default=False, verbose_name='是否封禁')),
            ],
            options={
                'verbose_name': '聊天室成员',
                'verbose_name_plural': '聊天室成员',
            },
        ),
        migrations.CreateModel(
            name='EnhancedAIDependencyMeter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_code_lines', models.IntegerField(default=0, verbose_name='总代码行数')),
                ('ai_generated_lines', models.IntegerField(default=0, verbose_name='AI生成代码行数')),
                ('manual_code_lines', models.IntegerField(default=0, verbose_name='手写代码行数')),
                ('ai_rejection_count', models.IntegerField(default=0, verbose_name='拒绝AI次数')),
                ('dependency_score', models.FloatField(default=0.0, verbose_name='依赖度评分')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='最后更新')),
            ],
            options={
                'verbose_name': 'AI依赖度仪表',
                'verbose_name_plural': 'AI依赖度仪表',
            },
        ),
        migrations.CreateModel(
            name='EnhancedCodeWorkoutSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workout_type', models.CharField(choices=[('pull_up', '引体向上(原生JS)'), ('plank', '平板支撑(拒绝AI)'), ('squat', '深蹲(重构函数)'), ('push_up', '俯卧撑(手写算法)'), ('burpee', '波比跳(调试代码)')], max_length=20, verbose_name='训练类型')),
                ('duration_seconds', models.IntegerField(verbose_name='训练时长(秒)')),
                ('difficulty_level', models.IntegerField(default=1, verbose_name='难度等级')),
                ('code_snippet', models.TextField(blank=True, null=True, verbose_name='代码片段')),
                ('ai_rejection_count', models.IntegerField(default=0, verbose_name='拒绝AI次数')),
                ('manual_code_lines', models.IntegerField(default=0, verbose_name='手写代码行数')),
                ('refactored_functions', models.IntegerField(default=0, verbose_name='重构函数数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='训练时间')),
            ],
            options={
                'verbose_name': '代码训练',
                'verbose_name_plural': '代码训练',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedCoPilotCollaboration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collaboration_type', models.CharField(choices=[('skeleton', '骨架代码'), ('muscle', '肌肉代码'), ('nervous', '神经系统')], max_length=20, verbose_name='协作类型')),
                ('original_code', models.TextField(verbose_name='原始代码')),
                ('ai_generated_code', models.TextField(verbose_name='AI生成代码')),
                ('final_code', models.TextField(verbose_name='最终代码')),
                ('project_name', models.CharField(max_length=200, verbose_name='项目名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='协作描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': 'AI协作声明',
                'verbose_name_plural': 'AI协作声明',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedDailyWorkoutChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge_type', models.CharField(choices=[('fitness', '健身挑战'), ('coding', '编程挑战'), ('mixed', '混合挑战')], max_length=20, verbose_name='挑战类型')),
                ('date', models.DateField(auto_now_add=True, verbose_name='挑战日期')),
                ('tasks', models.JSONField(default=list, verbose_name='挑战任务')),
                ('completed_tasks', models.JSONField(default=list, verbose_name='完成任务')),
                ('total_score', models.IntegerField(default=0, verbose_name='总得分')),
                ('is_completed', models.BooleanField(default=False, verbose_name='是否完成')),
                ('reward_unlocked', models.BooleanField(default=False, verbose_name='是否解锁奖励')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
            ],
            options={
                'verbose_name': '每日训练挑战',
                'verbose_name_plural': '每日训练挑战',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedDietPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='开始日期')),
                ('end_date', models.DateField(verbose_name='结束日期')),
                ('daily_calories', models.IntegerField(verbose_name='每日总热量')),
                ('protein_goal', models.IntegerField(verbose_name='蛋白质目标(g)')),
                ('carbs_goal', models.IntegerField(verbose_name='碳水目标(g)')),
                ('fat_goal', models.IntegerField(verbose_name='脂肪目标(g)')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '饮食计划',
                'verbose_name_plural': '饮食计划',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedExerciseWeightRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exercise_type', models.CharField(choices=[('squat', '深蹲'), ('bench_press', '卧推'), ('deadlift', '硬拉'), ('overhead_press', '推举'), ('barbell_row', '杠铃划船'), ('pull_up', '引体向上'), ('dip', '双杠臂屈伸'), ('lunge', '弓步蹲'), ('leg_press', '腿举'), ('leg_curl', '腿弯举'), ('leg_extension', '腿伸展'), ('calf_raise', '提踵'), ('bicep_curl', '弯举'), ('tricep_extension', '臂屈伸'), ('shoulder_press', '肩推'), ('lateral_raise', '侧平举'), ('rear_delt_fly', '后三角肌飞鸟'), ('chest_fly', '飞鸟'), ('lat_pulldown', '高位下拉'), ('face_pull', '面拉'), ('shrug', '耸肩'), ('upright_row', '直立划船'), ('good_morning', '早安式'), ('romanian_deadlift', '罗马尼亚硬拉'), ('sumo_deadlift', '相扑硬拉'), ('front_squat', '前蹲'), ('back_squat', '后蹲'), ('box_squat', '箱式深蹲'), ('pause_squat', '暂停深蹲'), ('close_grip_bench', '窄握卧推'), ('wide_grip_bench', '宽握卧推'), ('incline_bench', '上斜卧推'), ('decline_bench', '下斜卧推'), ('dumbbell_bench', '哑铃卧推'), ('dumbbell_squat', '哑铃深蹲'), ('goblet_squat', '高脚杯深蹲'), ('bulgarian_split_squat', '保加利亚分腿蹲'), ('step_up', '台阶上'), ('hip_thrust', '臀桥'), ('glute_bridge', '臀桥'), ('plank', '平板支撑'), ('side_plank', '侧平板'), ('crunch', '卷腹'), ('sit_up', '仰卧起坐'), ('russian_twist', '俄罗斯转体'), ('mountain_climber', '登山者'), ('burpee', '波比跳'), ('jumping_jack', '开合跳'), ('high_knee', '高抬腿'), ('butt_kick', '后踢腿'), ('other', '其他')], max_length=50, verbose_name='锻炼类型')),
                ('weight', models.FloatField(verbose_name='重量(kg)')),
                ('reps', models.IntegerField(verbose_name='次数')),
                ('rep_type', models.CharField(choices=[('1rm', '1RM'), ('3rm', '3RM'), ('5rm', '5RM'), ('8rm', '8RM'), ('10rm', '10RM'), ('12rm', '12RM'), ('15rm', '15RM'), ('20rm', '20RM'), ('max_reps', '最大次数'), ('custom', '自定义')], default='custom', max_length=10, verbose_name='次数类型')),
                ('sets', models.IntegerField(default=1, verbose_name='组数')),
                ('rpe', models.IntegerField(blank=True, null=True, verbose_name='RPE(1-10)')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('workout_date', models.DateField(verbose_name='训练日期')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='记录时间')),
            ],
            options={
                'verbose_name': '锻炼重量记录',
                'verbose_name_plural': '锻炼重量记录',
                'ordering': ['-workout_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedExhaustionProof',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proof_type', models.CharField(choices=[('fitness', '健身力竭'), ('coding', '编程力竭'), ('mental', '精神力竭'), ('mixed', '混合力竭')], max_length=20, verbose_name='证明类型')),
                ('title', models.CharField(max_length=200, verbose_name='证明标题')),
                ('description', models.TextField(verbose_name='证明描述')),
                ('heart_rate_data', models.JSONField(default=dict, verbose_name='心率数据')),
                ('audio_recording_url', models.URLField(blank=True, null=True, verbose_name='录音文件')),
                ('nft_metadata', models.JSONField(default=dict, verbose_name='NFT元数据')),
                ('nft_token_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='NFT代币ID')),
                ('blockchain_tx_hash', models.CharField(blank=True, max_length=200, null=True, verbose_name='区块链交易哈希')),
                ('is_minted', models.BooleanField(default=False, verbose_name='是否已铸造')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '力竭证明',
                'verbose_name_plural': '力竭证明',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedFitnessStrengthProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('squat_1rm', models.FloatField(blank=True, null=True, verbose_name='深蹲1RM(kg)')),
                ('squat_1rm_date', models.DateField(blank=True, null=True, verbose_name='深蹲1RM日期')),
                ('bench_press_1rm', models.FloatField(blank=True, null=True, verbose_name='卧推1RM(kg)')),
                ('bench_press_1rm_date', models.DateField(blank=True, null=True, verbose_name='卧推1RM日期')),
                ('deadlift_1rm', models.FloatField(blank=True, null=True, verbose_name='硬拉1RM(kg)')),
                ('deadlift_1rm_date', models.DateField(blank=True, null=True, verbose_name='硬拉1RM日期')),
                ('total_1rm', models.FloatField(blank=True, null=True, verbose_name='三大项总重量(kg)')),
                ('bodyweight', models.FloatField(blank=True, null=True, verbose_name='记录时体重(kg)')),
                ('bodyweight_date', models.DateField(blank=True, null=True, verbose_name='体重记录日期')),
                ('strength_coefficient', models.FloatField(blank=True, null=True, verbose_name='力量系数(总重量/体重)')),
                ('squat_goal', models.FloatField(blank=True, null=True, verbose_name='深蹲目标(kg)')),
                ('bench_press_goal', models.FloatField(blank=True, null=True, verbose_name='卧推目标(kg)')),
                ('deadlift_goal', models.FloatField(blank=True, null=True, verbose_name='硬拉目标(kg)')),
                ('total_goal', models.FloatField(blank=True, null=True, verbose_name='总重量目标(kg)')),
                ('total_workouts', models.IntegerField(default=0, verbose_name='总训练次数')),
                ('current_streak', models.IntegerField(default=0, verbose_name='当前连续天数')),
                ('longest_streak', models.IntegerField(default=0, verbose_name='最长连续天数')),
                ('total_duration', models.IntegerField(default=0, verbose_name='总训练时长(分钟)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '健身力量档案',
                'verbose_name_plural': '健身力量档案',
            },
        ),
        migrations.CreateModel(
            name='EnhancedFitnessWorkoutSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workout_type', models.CharField(choices=[('strength', '力量训练'), ('cardio', '有氧运动'), ('flexibility', '柔韧性训练'), ('balance', '平衡训练'), ('mixed', '混合训练')], max_length=20, verbose_name='训练类型')),
                ('intensity', models.CharField(choices=[('light', '轻度'), ('moderate', '中度'), ('intense', '高强度'), ('extreme', '极限')], max_length=20, verbose_name='强度等级')),
                ('duration_minutes', models.IntegerField(verbose_name='训练时长(分钟)')),
                ('calories_burned', models.IntegerField(default=0, verbose_name='消耗卡路里')),
                ('heart_rate_avg', models.IntegerField(default=0, verbose_name='平均心率')),
                ('heart_rate_max', models.IntegerField(default=0, verbose_name='最大心率')),
                ('exercises', models.JSONField(default=list, verbose_name='训练动作')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='训练笔记')),
                ('audio_recording_url', models.URLField(blank=True, null=True, verbose_name='喘息录音')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='训练时间')),
            ],
            options={
                'verbose_name': '健身训练',
                'verbose_name_plural': '健身训练',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedFoodDatabase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='食物名称')),
                ('category', models.CharField(max_length=100, verbose_name='食物类别')),
                ('calories_per_100g', models.FloatField(verbose_name='每100g热量')),
                ('protein_per_100g', models.FloatField(verbose_name='每100g蛋白质')),
                ('carbs_per_100g', models.FloatField(verbose_name='每100g碳水')),
                ('fat_per_100g', models.FloatField(verbose_name='每100g脂肪')),
                ('fiber_per_100g', models.FloatField(default=0, verbose_name='每100g纤维')),
                ('is_vegetarian', models.BooleanField(default=False, verbose_name='是否素食')),
                ('is_gluten_free', models.BooleanField(default=False, verbose_name='是否无麸质')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '食物数据库',
                'verbose_name_plural': '食物数据库',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedMeal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meal_type', models.CharField(choices=[('breakfast', '早餐'), ('lunch', '午餐'), ('dinner', '晚餐'), ('snack', '加餐'), ('pre_workout', '训练前'), ('post_workout', '训练后')], max_length=20, verbose_name='餐食类型')),
                ('day_of_week', models.IntegerField(verbose_name='星期几(1-7)')),
                ('description', models.TextField(verbose_name='餐食描述')),
                ('ingredients', models.JSONField(default=list, verbose_name='食材清单')),
                ('calories', models.IntegerField(verbose_name='热量')),
                ('protein', models.FloatField(verbose_name='蛋白质(g)')),
                ('carbs', models.FloatField(verbose_name='碳水(g)')),
                ('fat', models.FloatField(verbose_name='脂肪(g)')),
                ('ideal_time', models.TimeField(blank=True, null=True, verbose_name='理想用餐时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '餐食',
                'verbose_name_plural': '餐食',
                'ordering': ['day_of_week', 'meal_type'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedMealLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consumed_date', models.DateField(verbose_name='消费日期')),
                ('consumed_time', models.TimeField(verbose_name='消费时间')),
                ('actual_calories', models.IntegerField(blank=True, null=True, verbose_name='实际热量')),
                ('actual_protein', models.FloatField(blank=True, null=True, verbose_name='实际蛋白质')),
                ('actual_carbs', models.FloatField(blank=True, null=True, verbose_name='实际碳水')),
                ('actual_fat', models.FloatField(blank=True, null=True, verbose_name='实际脂肪')),
                ('notes', models.TextField(blank=True, verbose_name='备注')),
                ('is_completed', models.BooleanField(default=False, verbose_name='是否完成')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '餐食记录',
                'verbose_name_plural': '餐食记录',
                'ordering': ['-consumed_date', '-consumed_time'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedNutritionReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_type', models.CharField(choices=[('meal_time', '用餐时间'), ('pre_workout', '训练前加餐'), ('post_workout', '训练后补充'), ('hydration', '水分补充'), ('meal_log', '餐食记录'), ('weight_track', '体重记录')], max_length=20, verbose_name='提醒类型')),
                ('message', models.TextField(verbose_name='提醒内容')),
                ('trigger_time', models.TimeField(blank=True, null=True, verbose_name='触发时间')),
                ('trigger_days', models.JSONField(default=list, verbose_name='触发日期(1-7)')),
                ('is_recurring', models.BooleanField(default=True, verbose_name='是否重复')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('last_sent', models.DateTimeField(blank=True, null=True, verbose_name='最后发送时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '营养提醒',
                'verbose_name_plural': '营养提醒',
                'ordering': ['trigger_time'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedPainCurrency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency_type', models.CharField(choices=[('exhaustion', '力竭币'), ('rejection', '拒绝币'), ('manual', '手写币'), ('breakthrough', '突破币')], max_length=20, verbose_name='货币类型')),
                ('amount', models.IntegerField(default=0, verbose_name='数量')),
                ('total_earned', models.IntegerField(default=0, verbose_name='总获得')),
                ('total_spent', models.IntegerField(default=0, verbose_name='总消费')),
                ('last_earned', models.DateTimeField(auto_now=True, verbose_name='最后获得时间')),
            ],
            options={
                'verbose_name': '痛苦货币',
                'verbose_name_plural': '痛苦货币',
            },
        ),
        migrations.CreateModel(
            name='EnhancedTrainingPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='计划名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='计划描述')),
                ('plan_type', models.CharField(choices=[('strength', '力量训练'), ('hypertrophy', '增肌训练'), ('endurance', '耐力训练'), ('weight_loss', '减脂训练'), ('powerlifting', '力量举'), ('bodybuilding', '健美'), ('functional', '功能性训练'), ('rehabilitation', '康复训练'), ('sport_specific', '专项训练'), ('general_fitness', '综合健身')], max_length=20, verbose_name='计划类型')),
                ('difficulty', models.CharField(choices=[('beginner', '初学者'), ('intermediate', '中级'), ('advanced', '高级'), ('expert', '专家')], max_length=20, verbose_name='难度等级')),
                ('duration_weeks', models.IntegerField(default=8, verbose_name='计划周期(周)')),
                ('training_days_per_week', models.IntegerField(default=3, verbose_name='每周训练天数')),
                ('session_duration', models.IntegerField(default=60, verbose_name='单次训练时长(分钟)')),
                ('primary_goals', models.JSONField(default=list, verbose_name='主要目标')),
                ('secondary_goals', models.JSONField(default=list, verbose_name='次要目标')),
                ('week_schedule', models.JSONField(default=list, verbose_name='周安排')),
                ('progression_scheme', models.JSONField(default=dict, verbose_name='进阶方案')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('active', '激活'), ('completed', '已完成'), ('paused', '已暂停'), ('archived', '已归档')], default='draft', max_length=20, verbose_name='计划状态')),
                ('visibility', models.CharField(choices=[('private', '私有'), ('shared', '分享'), ('public', '公开'), ('template', '模板')], default='private', max_length=20, verbose_name='可见性')),
                ('usage_count', models.IntegerField(default=0, verbose_name='使用次数')),
                ('completion_rate', models.FloatField(default=0.0, verbose_name='完成率')),
                ('average_rating', models.FloatField(default=0.0, verbose_name='平均评分')),
                ('total_ratings', models.IntegerField(default=0, verbose_name='评分总数')),
                ('tags', models.JSONField(default=list, verbose_name='标签')),
                ('search_keywords', models.TextField(blank=True, null=True, verbose_name='搜索关键词')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='发布时间')),
            ],
            options={
                'verbose_name': '训练计划',
                'verbose_name_plural': '训练计划',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedWeightTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(verbose_name='体重(kg)')),
                ('body_fat_percentage', models.FloatField(blank=True, null=True, verbose_name='体脂率(%)')),
                ('measurement_date', models.DateField(verbose_name='测量日期')),
                ('notes', models.TextField(blank=True, verbose_name='备注')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '体重追踪',
                'verbose_name_plural': '体重追踪',
                'ordering': ['-measurement_date'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedWorkoutDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_workouts', models.IntegerField(default=0, verbose_name='总训练次数')),
                ('total_duration', models.IntegerField(default=0, verbose_name='总训练时长(分钟)')),
                ('total_calories', models.IntegerField(default=0, verbose_name='总消耗卡路里')),
                ('current_streak', models.IntegerField(default=0, verbose_name='当前连续天数')),
                ('longest_streak', models.IntegerField(default=0, verbose_name='最长连续天数')),
                ('favorite_workout', models.CharField(blank=True, max_length=50, null=True, verbose_name='最爱训练')),
                ('weekly_stats', models.JSONField(default=dict, verbose_name='周统计')),
                ('monthly_stats', models.JSONField(default=dict, verbose_name='月统计')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='最后更新')),
            ],
            options={
                'verbose_name': '训练仪表盘',
                'verbose_name_plural': '训练仪表盘',
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='器械名称')),
                ('equipment_type', models.CharField(choices=[('barbell', '杠铃'), ('dumbbell', '哑铃'), ('cable', '绳索'), ('machine', '器械'), ('bodyweight', '自重'), ('kettlebell', '壶铃'), ('resistance_band', '弹力带'), ('medicine_ball', '药球'), ('suspension', '悬吊'), ('cardio', '有氧器械'), ('other', '其他')], max_length=20, verbose_name='器械类型')),
                ('description', models.TextField(blank=True, null=True, verbose_name='器械描述')),
                ('image_url', models.URLField(blank=True, null=True, verbose_name='器械图片')),
                ('availability', models.CharField(default='common', max_length=20, verbose_name='常见程度')),
            ],
            options={
                'verbose_name': '器械设备',
                'verbose_name_plural': '器械设备',
                'ordering': ['equipment_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='动作名称')),
                ('english_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='英文名称')),
                ('alternative_names', models.JSONField(default=list, verbose_name='别名')),
                ('exercise_type', models.CharField(choices=[('compound', '复合动作'), ('isolation', '孤立动作'), ('cardio', '有氧运动'), ('flexibility', '柔韧性'), ('balance', '平衡性'), ('plyometric', '爆发力'), ('isometric', '等长收缩')], max_length=20, verbose_name='动作类型')),
                ('difficulty', models.CharField(choices=[('beginner', '初学者'), ('intermediate', '中级'), ('advanced', '高级'), ('expert', '专家')], max_length=20, verbose_name='难度等级')),
                ('description', models.TextField(verbose_name='动作描述')),
                ('instructions', models.TextField(verbose_name='动作要领')),
                ('setup_instructions', models.TextField(blank=True, null=True, verbose_name='准备动作')),
                ('execution_steps', models.JSONField(default=list, verbose_name='执行步骤')),
                ('form_cues', models.JSONField(default=list, verbose_name='技术提示')),
                ('common_mistakes', models.JSONField(default=list, verbose_name='常见错误')),
                ('safety_tips', models.JSONField(default=list, verbose_name='安全提示')),
                ('recommended_sets', models.CharField(default='3-4', max_length=20, verbose_name='推荐组数')),
                ('recommended_reps', models.CharField(default='8-12', max_length=20, verbose_name='推荐次数')),
                ('recommended_rest', models.CharField(default='60-90s', max_length=20, verbose_name='组间休息')),
                ('tempo', models.CharField(blank=True, max_length=20, null=True, verbose_name='动作节奏')),
                ('demonstration_video', models.URLField(blank=True, null=True, verbose_name='示范视频')),
                ('form_images', models.JSONField(default=list, verbose_name='动作图片')),
                ('animation_gif', models.URLField(blank=True, null=True, verbose_name='动作动图')),
                ('variations', models.JSONField(default=list, verbose_name='动作变式')),
                ('progressions', models.JSONField(default=list, verbose_name='进阶动作')),
                ('regressions', models.JSONField(default=list, verbose_name='简化动作')),
                ('popularity_score', models.FloatField(default=0.0, verbose_name='受欢迎度')),
                ('effectiveness_rating', models.FloatField(default=0.0, verbose_name='有效性评分')),
                ('usage_count', models.IntegerField(default=0, verbose_name='使用次数')),
                ('average_rating', models.FloatField(default=0.0, verbose_name='平均评分')),
                ('tags', models.JSONField(default=list, verbose_name='标签')),
                ('categories', models.JSONField(default=list, verbose_name='分类标签')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('is_featured', models.BooleanField(default=False, verbose_name='是否精选')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '健身动作',
                'verbose_name_plural': '健身动作',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExerciseRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='评分(1-5)')),
                ('difficulty_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='难度评分(1-5)')),
                ('effectiveness_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='有效性评分(1-5)')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='评价')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='评价时间')),
            ],
            options={
                'verbose_name': '动作评分',
                'verbose_name_plural': '动作评分',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExerciseSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_number', models.IntegerField(verbose_name='组数')),
                ('set_type', models.CharField(choices=[('working', '正式组'), ('warmup', '热身组'), ('dropset', '递减组'), ('superset', '超级组'), ('rest_pause', '休息暂停'), ('cluster', '集群组'), ('amrap', 'AMRAP'), ('failure', '力竭组')], default='working', max_length=20, verbose_name='组数类型')),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='重量(kg)')),
                ('reps', models.IntegerField(blank=True, null=True, verbose_name='次数')),
                ('duration_seconds', models.IntegerField(blank=True, null=True, verbose_name='持续时间(秒)')),
                ('distance_meters', models.FloatField(blank=True, null=True, verbose_name='距离(米)')),
                ('rpe', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], null=True, verbose_name='RPE')),
                ('difficulty', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='难度感受')),
                ('is_completed', models.BooleanField(default=False, verbose_name='是否完成')),
                ('is_personal_best', models.BooleanField(default=False, verbose_name='是否个人最佳')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '动作组数',
                'verbose_name_plural': '动作组数',
                'ordering': ['session', 'exercise', 'set_number'],
            },
        ),
        migrations.CreateModel(
            name='FitnessAchievementCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='分类名称')),
                ('description', models.TextField(verbose_name='分类描述')),
                ('icon', models.CharField(default='fas fa-star', max_length=50, verbose_name='分类图标')),
                ('color', models.CharField(default='#667eea', max_length=7, verbose_name='分类颜色')),
                ('sort_order', models.IntegerField(default=0, verbose_name='排序')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
            ],
            options={
                'verbose_name': '成就分类',
                'verbose_name_plural': '成就分类',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LegacyImportantMoment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moment_type', models.CharField(choices=[('first_meeting', '初次见面'), ('friendship_milestone', '友谊里程碑'), ('collaboration', '重要合作'), ('conflict_resolution', '解决矛盾'), ('celebration', '共同庆祝'), ('farewell', '告别时刻'), ('reunion', '重逢'), ('achievement', '共同成就'), ('crisis_support', '危机支持'), ('life_change', '人生转折'), ('other', '其他')], max_length=30, verbose_name='时刻类型')),
                ('title', models.CharField(max_length=200, verbose_name='时刻标题')),
                ('description', models.TextField(verbose_name='详细描述')),
                ('date', models.DateField(verbose_name='日期')),
                ('location', models.CharField(blank=True, max_length=200, null=True, verbose_name='地点')),
                ('photos', models.JSONField(default=list, verbose_name='照片')),
                ('videos', models.JSONField(default=list, verbose_name='视频')),
                ('audio_recordings', models.JSONField(default=list, verbose_name='录音')),
                ('documents', models.JSONField(default=list, verbose_name='文档')),
                ('emotional_impact', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=3, verbose_name='情感影响程度')),
                ('personal_reflection', models.TextField(blank=True, null=True, verbose_name='个人反思')),
                ('tags', models.JSONField(default=list, verbose_name='标签')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '重要时刻',
                'verbose_name_plural': '重要时刻',
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LegacyInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('meeting', '见面'), ('phone_call', '电话'), ('video_call', '视频通话'), ('message', '消息聊天'), ('email', '邮件'), ('social_media', '社交媒体'), ('event', '共同活动'), ('gift', '送礼/收礼'), ('help', '互相帮助'), ('other', '其他')], max_length=20, verbose_name='互动类型')),
                ('date', models.DateField(verbose_name='日期')),
                ('time', models.TimeField(blank=True, null=True, verbose_name='时间')),
                ('location', models.CharField(blank=True, max_length=200, null=True, verbose_name='地点')),
                ('title', models.CharField(max_length=200, verbose_name='标题/摘要')),
                ('content', models.TextField(verbose_name='详细内容')),
                ('topics_discussed', models.JSONField(default=list, verbose_name='讨论话题')),
                ('agreements_made', models.TextField(blank=True, null=True, verbose_name='达成的约定/承诺')),
                ('mood', models.CharField(blank=True, choices=[('very_happy', '非常开心'), ('happy', '开心'), ('neutral', '一般'), ('disappointed', '失望'), ('sad', '难过'), ('angry', '生气'), ('confused', '困惑'), ('excited', '兴奋'), ('nervous', '紧张'), ('grateful', '感激')], max_length=20, null=True, verbose_name='当时心情')),
                ('impression_notes', models.TextField(blank=True, null=True, verbose_name='印象/感受')),
                ('photos', models.JSONField(default=list, verbose_name='相关照片')),
                ('files', models.JSONField(default=list, verbose_name='相关文件')),
                ('links', models.JSONField(default=list, verbose_name='相关链接')),
                ('tags', models.JSONField(default=list, verbose_name='自定义标签')),
                ('is_important', models.BooleanField(default=False, verbose_name='是否重要')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '互动记录',
                'verbose_name_plural': '互动记录',
                'ordering': ['-date', '-time', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LegacyPersonProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='姓名')),
                ('nickname', models.CharField(blank=True, max_length=100, null=True, verbose_name='昵称/备注名')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='lifegraph/avatars/', verbose_name='头像')),
                ('first_met_date', models.DateField(blank=True, null=True, verbose_name='认识日期')),
                ('first_met_location', models.CharField(blank=True, max_length=200, null=True, verbose_name='认识场景')),
                ('importance_level', models.IntegerField(choices=[(1, '⭐'), (2, '⭐⭐'), (3, '⭐⭐⭐'), (4, '⭐⭐⭐⭐'), (5, '⭐⭐⭐⭐⭐')], default=3, verbose_name='重要程度')),
                ('gender', models.CharField(choices=[('male', '男'), ('female', '女'), ('other', '其他'), ('unknown', '未知')], default='unknown', max_length=20, verbose_name='性别')),
                ('age', models.IntegerField(blank=True, null=True, verbose_name='年龄')),
                ('occupation', models.CharField(blank=True, max_length=100, null=True, verbose_name='职业')),
                ('company_school', models.CharField(blank=True, max_length=200, null=True, verbose_name='公司/学校')),
                ('hometown', models.CharField(blank=True, max_length=100, null=True, verbose_name='家乡')),
                ('appearance_notes', models.TextField(blank=True, null=True, verbose_name='外貌特征')),
                ('personality_traits', models.JSONField(default=list, verbose_name='性格特点')),
                ('interests_hobbies', models.JSONField(default=list, verbose_name='兴趣爱好')),
                ('habits_phrases', models.TextField(blank=True, null=True, verbose_name='习惯/口头禅')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('important_dates', models.JSONField(default=dict, verbose_name='重要日期')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='电话')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='邮箱')),
                ('social_accounts', models.JSONField(default=dict, verbose_name='社交媒体账号')),
                ('interaction_count', models.IntegerField(default=0, verbose_name='互动次数')),
                ('last_interaction_date', models.DateField(blank=True, null=True, verbose_name='最后互动日期')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '人物档案',
                'verbose_name_plural': '人物档案',
                'ordering': ['-importance_level', '-last_interaction_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LegacyRelationshipReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_type', models.CharField(choices=[('birthday', '生日提醒'), ('anniversary', '纪念日提醒'), ('contact', '联系提醒'), ('follow_up', '跟进提醒'), ('custom', '自定义提醒')], max_length=20, verbose_name='提醒类型')),
                ('title', models.CharField(max_length=200, verbose_name='提醒标题')),
                ('description', models.TextField(blank=True, null=True, verbose_name='提醒描述')),
                ('reminder_date', models.DateField(verbose_name='提醒日期')),
                ('reminder_time', models.TimeField(default='09:00', verbose_name='提醒时间')),
                ('status', models.CharField(choices=[('active', '活跃'), ('completed', '已完成'), ('snoozed', '已推迟'), ('cancelled', '已取消')], default='active', max_length=20, verbose_name='状态')),
                ('is_recurring', models.BooleanField(default=False, verbose_name='是否重复')),
                ('recurrence_pattern', models.CharField(blank=True, max_length=50, null=True, verbose_name='重复模式')),
                ('snooze_count', models.IntegerField(default=0, verbose_name='推迟次数')),
                ('max_snooze', models.IntegerField(default=3, verbose_name='最大推迟次数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
            ],
            options={
                'verbose_name': '人际关系提醒',
                'verbose_name_plural': '人际关系提醒',
                'ordering': ['reminder_date', 'reminder_time'],
            },
        ),
        migrations.CreateModel(
            name='LegacyRelationshipStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_people', models.IntegerField(default=0, verbose_name='总人数')),
                ('total_interactions', models.IntegerField(default=0, verbose_name='总互动次数')),
                ('total_moments', models.IntegerField(default=0, verbose_name='重要时刻数')),
                ('relationship_distribution', models.JSONField(default=dict, verbose_name='关系分布')),
                ('interaction_frequency', models.JSONField(default=dict, verbose_name='互动频率分布')),
                ('active_relationships', models.IntegerField(default=0, verbose_name='活跃关系数')),
                ('dormant_relationships', models.IntegerField(default=0, verbose_name='休眠关系数')),
                ('weekly_interactions', models.JSONField(default=list, verbose_name='每周互动数')),
                ('monthly_interactions', models.JSONField(default=list, verbose_name='每月互动数')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
            ],
            options={
                'verbose_name': '人际关系统计',
                'verbose_name_plural': '人际关系统计',
            },
        ),
        migrations.CreateModel(
            name='LegacyRelationshipTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='标签名称')),
                ('tag_type', models.CharField(choices=[('predefined', '预定义标签'), ('custom', '自定义标签')], default='predefined', max_length=20, verbose_name='标签类型')),
                ('color', models.CharField(default='#9c27b0', max_length=7, verbose_name='标签颜色')),
                ('is_global', models.BooleanField(default=True, verbose_name='是否全局标签')),
                ('usage_count', models.IntegerField(default=0, verbose_name='使用次数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '关系标签',
                'verbose_name_plural': '关系标签',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MuscleGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='肌肉群名称')),
                ('chinese_name', models.CharField(max_length=50, verbose_name='中文名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('anatomy_image', models.URLField(blank=True, null=True, verbose_name='解剖图片')),
                ('color', models.CharField(default='#667eea', max_length=7, verbose_name='标识颜色')),
            ],
            options={
                'verbose_name': '肌肉群',
                'verbose_name_plural': '肌肉群',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlanLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('library_type', models.CharField(choices=[('official', '官方计划'), ('community', '社区计划'), ('premium', '付费计划'), ('user_shared', '用户分享')], max_length=20, verbose_name='库类型')),
                ('featured_image', models.URLField(blank=True, null=True, verbose_name='特色图片')),
                ('preview_video', models.URLField(blank=True, null=True, verbose_name='预览视频')),
                ('detailed_description', models.TextField(verbose_name='详细描述')),
                ('target_audience', models.JSONField(default=list, verbose_name='目标人群')),
                ('prerequisites', models.JSONField(default=list, verbose_name='前置条件')),
                ('equipment_required', models.JSONField(default=list, verbose_name='所需器械')),
                ('is_featured', models.BooleanField(default=False, verbose_name='是否精选')),
                ('is_trending', models.BooleanField(default=False, verbose_name='是否热门')),
                ('is_new', models.BooleanField(default=True, verbose_name='是否新计划')),
                ('view_count', models.IntegerField(default=0, verbose_name='浏览次数')),
                ('download_count', models.IntegerField(default=0, verbose_name='下载次数')),
                ('like_count', models.IntegerField(default=0, verbose_name='点赞数')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='最后更新')),
            ],
            options={
                'verbose_name': '计划库',
                'verbose_name_plural': '计划库',
                'ordering': ['-is_featured', '-is_trending', '-added_at'],
            },
        ),
        migrations.CreateModel(
            name='ShipBaoFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='收藏时间')),
            ],
            options={
                'verbose_name': '商品收藏',
                'verbose_name_plural': '商品收藏',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ShipBaoInquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', '待响应'), ('responded', '已响应'), ('ignored', '已忽略'), ('cancelled', '已取消')], default='pending', max_length=20, verbose_name='状态')),
                ('initial_message', models.TextField(blank=True, verbose_name='初始消息')),
                ('priority_score', models.IntegerField(default=0, verbose_name='优先级分数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('responded_at', models.DateTimeField(blank=True, null=True, verbose_name='响应时间')),
            ],
            options={
                'verbose_name': '商品咨询',
                'verbose_name_plural': '商品咨询',
                'ordering': ['-priority_score', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='TemplateExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sets', models.CharField(max_length=20, verbose_name='组数')),
                ('reps', models.CharField(max_length=20, verbose_name='次数')),
                ('rest_time', models.CharField(max_length=20, verbose_name='休息时间')),
                ('weight_percentage', models.CharField(blank=True, max_length=20, null=True, verbose_name='重量百分比')),
                ('exercise_order', models.IntegerField(verbose_name='动作顺序')),
                ('superset_group', models.CharField(blank=True, max_length=10, null=True, verbose_name='超级组')),
                ('circuit_group', models.CharField(blank=True, max_length=10, null=True, verbose_name='循环组')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name': '模板动作',
                'verbose_name_plural': '模板动作',
                'ordering': ['exercise_order'],
            },
        ),
        migrations.CreateModel(
            name='TrainingPlanCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='分类名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='分类描述')),
                ('icon', models.CharField(default='fas fa-dumbbell', max_length=50, verbose_name='分类图标')),
                ('color', models.CharField(default='#667eea', max_length=7, verbose_name='分类颜色')),
                ('sort_order', models.IntegerField(default=0, verbose_name='排序')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
            ],
            options={
                'verbose_name': '训练计划分类',
                'verbose_name_plural': '训练计划分类',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TrainingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_type', models.CharField(choices=[('scheduled', '计划训练'), ('makeup', '补训'), ('extra', '加练'), ('test', '测试')], default='scheduled', max_length=20, verbose_name='会话类型')),
                ('week_number', models.IntegerField(verbose_name='周次')),
                ('day_number', models.IntegerField(verbose_name='天数')),
                ('session_name', models.CharField(max_length=200, verbose_name='会话名称')),
                ('planned_exercises', models.JSONField(default=list, verbose_name='计划动作')),
                ('actual_exercises', models.JSONField(default=list, verbose_name='实际动作')),
                ('status', models.CharField(choices=[('planned', '计划中'), ('in_progress', '进行中'), ('completed', '已完成'), ('skipped', '已跳过'), ('cancelled', '已取消')], default='planned', max_length=20, verbose_name='状态')),
                ('scheduled_date', models.DateField(verbose_name='计划日期')),
                ('actual_date', models.DateField(blank=True, null=True, verbose_name='实际日期')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='开始时间')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('duration_minutes', models.IntegerField(blank=True, null=True, verbose_name='训练时长')),
                ('calories_burned', models.IntegerField(blank=True, null=True, verbose_name='消耗卡路里')),
                ('average_heart_rate', models.IntegerField(blank=True, null=True, verbose_name='平均心率')),
                ('max_heart_rate', models.IntegerField(blank=True, null=True, verbose_name='最大心率')),
                ('rpe_score', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], null=True, verbose_name='RPE评分')),
                ('energy_level', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='精力水平')),
                ('mood_score', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='情绪评分')),
                ('pre_workout_notes', models.TextField(blank=True, null=True, verbose_name='训练前笔记')),
                ('post_workout_notes', models.TextField(blank=True, null=True, verbose_name='训练后笔记')),
                ('achievements', models.JSONField(default=list, verbose_name='训练成就')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '训练会话',
                'verbose_name_plural': '训练会话',
                'ordering': ['scheduled_date', 'week_number', 'day_number'],
            },
        ),
        migrations.CreateModel(
            name='TravelCity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='城市名称')),
                ('country', models.CharField(max_length=100, verbose_name='国家')),
                ('region', models.CharField(blank=True, max_length=100, null=True, verbose_name='地区')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='纬度')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='经度')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
            ],
            options={
                'verbose_name': '旅行城市',
                'verbose_name_plural': '旅行城市',
                'ordering': ['country', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TravelPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='攻略标题')),
                ('cover_image', models.ImageField(upload_to='travel_posts/covers/', verbose_name='封面图')),
                ('travel_styles', models.JSONField(default=list, verbose_name='旅行风格')),
                ('travel_duration', models.CharField(max_length=50, verbose_name='旅行时长')),
                ('travel_date', models.DateField(blank=True, null=True, verbose_name='出行时间')),
                ('location_city', models.CharField(blank=True, max_length=100, null=True, verbose_name='交易城市')),
                ('location_region', models.CharField(blank=True, max_length=100, null=True, verbose_name='交易地区')),
                ('location_address', models.CharField(blank=True, max_length=500, null=True, verbose_name='详细地址')),
                ('location_latitude', models.FloatField(blank=True, null=True, verbose_name='纬度')),
                ('location_longitude', models.FloatField(blank=True, null=True, verbose_name='经度')),
                ('location_radius', models.IntegerField(default=50, verbose_name='交易半径(公里)')),
                ('budget_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='人均预算')),
                ('budget_currency', models.CharField(default='CNY', max_length=10, verbose_name='预算货币')),
                ('budget_type', models.CharField(choices=[('transport', '交通'), ('accommodation', '住宿'), ('food', '美食'), ('shopping', '购物'), ('total', '总计')], default='total', max_length=20, verbose_name='预算类型')),
                ('itinerary_details', models.JSONField(default=list, verbose_name='行程明细')),
                ('transportation_methods', models.JSONField(default=list, verbose_name='交通方式')),
                ('food_recommendations', models.JSONField(default=list, verbose_name='美食推荐')),
                ('accommodation_recommendations', models.TextField(blank=True, null=True, verbose_name='住宿推荐')),
                ('travel_tips', models.TextField(blank=True, null=True, verbose_name='实用贴士')),
                ('custom_tags', models.JSONField(default=list, verbose_name='自定义标签')),
                ('view_count', models.IntegerField(default=0, verbose_name='查看次数')),
                ('like_count', models.IntegerField(default=0, verbose_name='点赞次数')),
                ('favorite_count', models.IntegerField(default=0, verbose_name='收藏次数')),
                ('comment_count', models.IntegerField(default=0, verbose_name='评论次数')),
                ('is_public', models.BooleanField(default=True, verbose_name='是否公开')),
                ('is_featured', models.BooleanField(default=False, verbose_name='是否推荐')),
                ('is_approved', models.BooleanField(default=True, verbose_name='是否审核通过')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '旅行攻略',
                'verbose_name_plural': '旅行攻略',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TravelPostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='评论内容')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='评论时间')),
            ],
            options={
                'verbose_name': '攻略评论',
                'verbose_name_plural': '攻略评论',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TravelPostFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='收藏时间')),
            ],
            options={
                'verbose_name': '攻略收藏',
                'verbose_name_plural': '攻略收藏',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TravelPostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='点赞时间')),
            ],
            options={
                'verbose_name': '攻略点赞',
                'verbose_name_plural': '攻略点赞',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserBadgeShowcase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('showcase_layout', models.CharField(default='grid', max_length=20, verbose_name='展示布局')),
                ('max_display_count', models.IntegerField(default=6, verbose_name='最大展示数量')),
                ('show_progress_badges', models.BooleanField(default=False, verbose_name='显示进度徽章')),
                ('show_rare_only', models.BooleanField(default=False, verbose_name='仅显示稀有徽章')),
                ('auto_update', models.BooleanField(default=True, verbose_name='自动更新展示')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '用户徽章展示',
                'verbose_name_plural': '用户徽章展示',
            },
        ),
        migrations.CreateModel(
            name='UserExercisePreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_favorite', models.BooleanField(default=False, verbose_name='是否收藏')),
                ('is_disliked', models.BooleanField(default=False, verbose_name='是否不喜欢')),
                ('is_mastered', models.BooleanField(default=False, verbose_name='是否已掌握')),
                ('personal_notes', models.TextField(blank=True, null=True, verbose_name='个人笔记')),
                ('custom_sets', models.CharField(blank=True, max_length=20, null=True, verbose_name='自定义组数')),
                ('custom_reps', models.CharField(blank=True, max_length=20, null=True, verbose_name='自定义次数')),
                ('custom_rest', models.CharField(blank=True, max_length=20, null=True, verbose_name='自定义休息')),
                ('times_performed', models.IntegerField(default=0, verbose_name='执行次数')),
                ('last_performed', models.DateTimeField(blank=True, null=True, verbose_name='最后执行时间')),
                ('personal_best', models.JSONField(default=dict, verbose_name='个人最佳记录')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '用户动作偏好',
                'verbose_name_plural': '用户动作偏好',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPlanCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_name', models.CharField(default='我的收藏', max_length=100, verbose_name='收藏夹名称')),
                ('personal_notes', models.TextField(blank=True, null=True, verbose_name='个人备注')),
                ('is_bookmarked', models.BooleanField(default=True, verbose_name='是否收藏')),
                ('is_liked', models.BooleanField(default=False, verbose_name='是否点赞')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='收藏时间')),
            ],
            options={
                'verbose_name': '用户计划收藏',
                'verbose_name_plural': '用户计划收藏',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserTrainingPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', '未开始'), ('in_progress', '进行中'), ('completed', '已完成'), ('paused', '已暂停'), ('abandoned', '已放弃')], default='not_started', max_length=20, verbose_name='状态')),
                ('current_week', models.IntegerField(default=0, verbose_name='当前周')),
                ('current_day', models.IntegerField(default=0, verbose_name='当前天')),
                ('completed_sessions', models.IntegerField(default=0, verbose_name='已完成训练')),
                ('total_sessions', models.IntegerField(default=0, verbose_name='总训练次数')),
                ('completion_percentage', models.FloatField(default=0.0, verbose_name='完成百分比')),
                ('custom_settings', models.JSONField(default=dict, verbose_name='个人设置')),
                ('modifications', models.JSONField(default=list, verbose_name='计划修改')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='开始日期')),
                ('target_end_date', models.DateField(blank=True, null=True, verbose_name='目标结束日期')),
                ('actual_end_date', models.DateField(blank=True, null=True, verbose_name='实际结束日期')),
                ('last_session_date', models.DateField(blank=True, null=True, verbose_name='最后训练日期')),
                ('rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='评分')),
                ('feedback', models.TextField(blank=True, null=True, verbose_name='反馈')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='加入时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '用户训练计划',
                'verbose_name_plural': '用户训练计划',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkoutTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='模板名称')),
                ('description', models.TextField(verbose_name='模板描述')),
                ('template_type', models.CharField(choices=[('strength', '力量训练'), ('cardio', '有氧训练'), ('hiit', 'HIIT训练'), ('circuit', '循环训练'), ('bodyweight', '自重训练'), ('flexibility', '柔韧性训练'), ('mixed', '混合训练')], max_length=20, verbose_name='模板类型')),
                ('difficulty', models.CharField(choices=[('beginner', '初学者'), ('intermediate', '中级'), ('advanced', '高级')], max_length=20, verbose_name='难度等级')),
                ('target_goals', models.JSONField(default=list, verbose_name='训练目标')),
                ('estimated_duration', models.IntegerField(verbose_name='预计时长(分钟)')),
                ('warm_up_exercises', models.JSONField(default=list, verbose_name='热身动作')),
                ('cool_down_exercises', models.JSONField(default=list, verbose_name='放松动作')),
                ('usage_count', models.IntegerField(default=0, verbose_name='使用次数')),
                ('average_rating', models.FloatField(default=0.0, verbose_name='平均评分')),
                ('is_public', models.BooleanField(default=False, verbose_name='是否公开')),
                ('is_official', models.BooleanField(default=False, verbose_name='是否官方模板')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '训练模板',
                'verbose_name_plural': '训练模板',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='achievement',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='achievement',
            name='user',
        ),
        migrations.AlterUniqueTogether(
            name='capsuleunlock',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='capsuleunlock',
            name='capsule',
        ),
        migrations.RemoveField(
            model_name='capsuleunlock',
            name='user',
        ),
        migrations.RemoveField(
            model_name='memoryfragment',
            name='capsule',
        ),
        migrations.RemoveField(
            model_name='memoryfragment',
            name='user',
        ),
        migrations.AlterUniqueTogether(
            name='parallelmatch',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='parallelmatch',
            name='user1',
        ),
        migrations.RemoveField(
            model_name='parallelmatch',
            name='user2',
        ),
        migrations.RemoveField(
            model_name='tarotdiary',
            name='reading',
        ),
        migrations.RemoveField(
            model_name='tarotdiary',
            name='user',
        ),
        migrations.RemoveField(
            model_name='timecapsule',
            name='user',
        ),
        migrations.AlterModelOptions(
            name='chatroom',
            options={'ordering': ['-last_activity'], 'verbose_name': '聊天室', 'verbose_name_plural': '聊天室'},
        ),
        migrations.AlterModelOptions(
            name='dailyquestion',
            options={'ordering': ['usage_count'], 'verbose_name': '每日问题', 'verbose_name_plural': '每日问题'},
        ),
        migrations.AlterModelOptions(
            name='douyinvideo',
            options={'ordering': ['-created_time'], 'verbose_name': '抖音视频', 'verbose_name_plural': '抖音视频'},
        ),
        migrations.AlterModelOptions(
            name='douyinvideoanalysis',
            options={'ordering': ['-analyzed_at'], 'verbose_name': '抖音视频分析', 'verbose_name_plural': '抖音视频分析'},
        ),
        migrations.AlterModelOptions(
            name='fitnessachievementmodule',
            options={'ordering': ['name'], 'verbose_name': '健身成就模块', 'verbose_name_plural': '健身成就模块'},
        ),
        migrations.AlterModelOptions(
            name='fitnessfollow',
            options={'ordering': ['-created_at'], 'verbose_name': '攻略使用记录', 'verbose_name_plural': '攻略使用记录'},
        ),
        migrations.AlterModelOptions(
            name='lifediaryentry',
            options={'ordering': ['-date'], 'verbose_name': '生活日记', 'verbose_name_plural': '生活日记'},
        ),
        migrations.AlterModelOptions(
            name='lifetag',
            options={'ordering': ['-usage_count', 'name'], 'verbose_name': '生活标签', 'verbose_name_plural': '生活标签'},
        ),
        migrations.AlterModelOptions(
            name='travelguidecache',
            options={'ordering': ['-created_at'], 'verbose_name': '旅游攻略缓存', 'verbose_name_plural': '旅游攻略缓存'},
        ),
        migrations.RemoveIndex(
            model_name='chatmessage',
            name='tools_chatm_room_id_fce68f_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatroom',
            name='tools_chatr_status_75a73e_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatroom',
            name='tools_chatr_user2_i_894795_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatroom',
            name='tools_chatr_user1_i_07d945_idx',
        ),
        migrations.RemoveIndex(
            model_name='heartlinkrequest',
            name='tools_heart_chat_ro_b9d0d6_idx',
        ),
        migrations.RemoveIndex(
            model_name='lifediaryentry',
            name='tools_lifed_date_0fdc13_idx',
        ),
        migrations.RemoveIndex(
            model_name='lifediaryentry',
            name='tools_lifed_user_id_241b53_idx',
        ),
        migrations.RemoveIndex(
            model_name='socialmedianotification',
            name='tools_socia_notific_35edf5_idx',
        ),
        migrations.RemoveIndex(
            model_name='socialmediaplatformconfig',
            name='tools_socia_is_acti_85d2c0_idx',
        ),
        migrations.RemoveIndex(
            model_name='travelguidecache',
            name='tools_trave_expires_a18f22_idx',
        ),
        migrations.RemoveIndex(
            model_name='travelguidecache',
            name='tools_trave_api_use_dd95e7_idx',
        ),
        migrations.RemoveIndex(
            model_name='travelguidecache',
            name='tools_trave_destina_c796fd_idx',
        ),
        migrations.RenameIndex(
            model_name='enhancedfitnessachievement',
            new_name='tools_enhan_module__6ba36d_idx',
            old_name='tools_enhan_module__2a5b7d_idx',
        ),
        migrations.RenameIndex(
            model_name='enhancedfitnessachievement',
            new_name='tools_enhan_level_302e9e_idx',
            old_name='tools_enhan_level_a1e9c5_idx',
        ),
        migrations.RenameIndex(
            model_name='enhanceduserfitnessachievement',
            new_name='tools_enhan_user_id_80b966_idx',
            old_name='tools_enhan_user_id_3b5f0e_idx',
        ),
        migrations.RenameIndex(
            model_name='enhanceduserfitnessachievement',
            new_name='tools_enhan_user_id_04438e_idx',
            old_name='tools_enhan_user_id_2c8a9d_idx',
        ),
        migrations.RenameIndex(
            model_name='enhanceduserfitnessachievement',
            new_name='tools_enhan_achieve_991ebf_idx',
            old_name='tools_enhan_achieve_7e4f1a_idx',
        ),
        migrations.RenameIndex(
            model_name='messageread',
            new_name='tools_messa_message_e2900e_idx',
            old_name='tools_messageread_message_read_at_idx',
        ),
        migrations.RenameIndex(
            model_name='messageread',
            new_name='tools_messa_user_id_7cdcb8_idx',
            old_name='tools_messageread_user_read_at_idx',
        ),
        migrations.RenameIndex(
            model_name='trainingplan',
            new_name='tools_train_user_id_180097_idx',
            old_name='tools_trainingplan_user_active_idx',
        ),
        migrations.AlterUniqueTogether(
            name='fitnessfollow',
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name='heartlinkrequest',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='dailyquestion',
            name='difficulty',
        ),
        migrations.RemoveField(
            model_name='dailyquestion',
            name='updated_at',
        ),
        migrations.RemoveField(
            model_name='douyinvideo',
            name='analysis',
        ),
        migrations.RemoveField(
            model_name='douyinvideo',
            name='created_at',
        ),
        migrations.RemoveField(
            model_name='douyinvideo',
            name='description',
        ),
        migrations.RemoveField(
            model_name='douyinvideo',
            name='published_at',
        ),
        migrations.RemoveField(
            model_name='douyinvideo',
            name='screenshot_urls',
        ),
        migrations.RemoveField(
            model_name='douyinvideo',
            name='tags',
        ),
        migrations.RemoveField(
            model_name='douyinvideo',
            name='theme',
        ),
        migrations.RemoveField(
            model_name='douyinvideo',
            name='thumbnail_url',
        ),
        migrations.RemoveField(
            model_name='douyinvideo',
            name='views',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='analysis_status',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='analysis_summary',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='completed_at',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='content_themes',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='created_at',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='error_message',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='follower_count',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='popular_videos',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='posting_frequency',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='product_preview',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='screenshots',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='total_comments',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='total_likes',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='total_shares',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='updated_at',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='up主_id',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='up主_name',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='up主_url',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='user',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='video_count',
        ),
        migrations.RemoveField(
            model_name='douyinvideoanalysis',
            name='video_tags',
        ),
        migrations.RemoveField(
            model_name='fitnessachievementmodule',
            name='sort_order',
        ),
        migrations.RemoveField(
            model_name='fitnessachievementmodule',
            name='updated_at',
        ),
        migrations.RemoveField(
            model_name='socialmediaplatformconfig',
            name='api_endpoint',
        ),
        migrations.RemoveField(
            model_name='socialmediaplatformconfig',
            name='api_key',
        ),
        migrations.RemoveField(
            model_name='socialmediaplatformconfig',
            name='is_active',
        ),
        migrations.RemoveField(
            model_name='socialmediaplatformconfig',
            name='rate_limit',
        ),
        migrations.AddField(
            model_name='dailyquestion',
            name='usage_count',
            field=models.IntegerField(default=0, verbose_name='使用次数'),
        ),
        migrations.AddField(
            model_name='douyinvideo',
            name='author_id',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='作者ID'),
        ),
        migrations.AddField(
            model_name='douyinvideo',
            name='author_name',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='作者名称'),
        ),
        migrations.AddField(
            model_name='douyinvideo',
            name='cover_url',
            field=models.URLField(blank=True, null=True, verbose_name='封面URL'),
        ),
        migrations.AddField(
            model_name='douyinvideo',
            name='created_time',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='视频创建时间'),
        ),
        migrations.AddField(
            model_name='douyinvideo',
            name='hashtags',
            field=models.JSONField(default=list, verbose_name='话题标签'),
        ),
        migrations.AddField(
            model_name='douyinvideo',
            name='music',
            field=models.JSONField(default=dict, verbose_name='音乐信息'),
        ),
        migrations.AddField(
            model_name='douyinvideoanalysis',
            name='analyzed_at',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='分析时间'),
        ),
        migrations.AddField(
            model_name='douyinvideoanalysis',
            name='author_name',
            field=models.CharField(default='', max_length=100, verbose_name='作者名称'),
        ),
        migrations.AddField(
            model_name='douyinvideoanalysis',
            name='created_time',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='视频创建时间'),
        ),
        migrations.AddField(
            model_name='douyinvideoanalysis',
            name='description',
            field=models.TextField(blank=True, verbose_name='视频描述'),
        ),
        migrations.AddField(
            model_name='douyinvideoanalysis',
            name='hashtags',
            field=models.JSONField(default=list, verbose_name='话题标签'),
        ),
        migrations.AddField(
            model_name='douyinvideoanalysis',
            name='music_info',
            field=models.JSONField(default=dict, verbose_name='音乐信息'),
        ),
        migrations.AddField(
            model_name='douyinvideoanalysis',
            name='statistics',
            field=models.JSONField(default=dict, verbose_name='统计数据'),
        ),
        migrations.AddField(
            model_name='douyinvideoanalysis',
            name='title',
            field=models.TextField(default='', verbose_name='视频标题'),
        ),
        migrations.AddField(
            model_name='douyinvideoanalysis',
            name='video_id',
            field=models.CharField(default='', max_length=100, unique=True, verbose_name='视频ID'),
        ),
        migrations.AddField(
            model_name='douyinvideoanalysis',
            name='video_url',
            field=models.URLField(default='', verbose_name='视频URL'),
        ),
        migrations.AddField(
            model_name='enhancedfitnessachievement',
            name='badge_reward',
            field=models.BooleanField(default=True, verbose_name='是否奖励徽章'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='attachment',
            field=models.FileField(blank=True, null=True, upload_to='travel_guides/', verbose_name='附件'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='attachment_name',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='附件名称'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='budget_range',
            field=models.CharField(default='medium', max_length=50, verbose_name='预算范围'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='content',
            field=models.TextField(default='', verbose_name='攻略内容'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='destination',
            field=models.CharField(default='', max_length=200, verbose_name='目的地'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='download_count',
            field=models.IntegerField(default=0, verbose_name='下载次数'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='interests',
            field=models.JSONField(default=list, verbose_name='兴趣标签'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='is_approved',
            field=models.BooleanField(default=True, verbose_name='是否审核通过'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='is_featured',
            field=models.BooleanField(default=False, verbose_name='是否推荐'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='is_public',
            field=models.BooleanField(default=True, verbose_name='是否公开'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='summary',
            field=models.TextField(blank=True, null=True, verbose_name='攻略摘要'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='title',
            field=models.CharField(default='', max_length=200, verbose_name='攻略标题'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='travel_duration',
            field=models.CharField(default='3-5天', max_length=50, verbose_name='旅行时长'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='travel_style',
            field=models.CharField(default='general', max_length=50, verbose_name='旅行风格'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='更新时间'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='usage_type',
            field=models.CharField(choices=[('view', '查看'), ('download', '下载'), ('use', '使用')], default='', max_length=20, verbose_name='使用类型'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='use_count',
            field=models.IntegerField(default=0, verbose_name='使用次数'),
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='user',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='fitnessfollow',
            name='view_count',
            field=models.IntegerField(default=0, verbose_name='查看次数'),
        ),
        migrations.AddField(
            model_name='lifecategory',
            name='user',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='lifetag',
            name='category',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='tools.lifecategory', verbose_name='分类'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='lifetag',
            name='usage_count',
            field=models.IntegerField(default=0, verbose_name='使用次数'),
        ),
        migrations.AddField(
            model_name='lifetag',
            name='user',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='socialmediaplatformconfig',
            name='api_config',
            field=models.JSONField(default=dict, verbose_name='API配置'),
        ),
        migrations.AddField(
            model_name='socialmediaplatformconfig',
            name='crawler_config',
            field=models.JSONField(default=dict, verbose_name='爬虫配置'),
        ),
        migrations.AddField(
            model_name='socialmediaplatformconfig',
            name='is_enabled',
            field=models.BooleanField(default=True, verbose_name='是否启用'),
        ),
        migrations.AddField(
            model_name='socialmediaplatformconfig',
            name='name',
            field=models.CharField(default='', max_length=50, verbose_name='平台名称'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='userfitnessachievement',
            name='is_equipped',
            field=models.BooleanField(default=False, verbose_name='是否佩戴'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='content',
            field=models.TextField(verbose_name='内容'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='发送时间'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.chatroom', verbose_name='聊天室'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='发送者'),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='更新时间'),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='user1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_rooms_as_user1', to=settings.AUTH_USER_MODEL, verbose_name='用户1'),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='user2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chat_rooms_as_user2', to=settings.AUTH_USER_MODEL, verbose_name='用户2'),
        ),
        migrations.AlterField(
            model_name='dailyquestion',
            name='category',
            field=models.CharField(max_length=50, verbose_name='问题分类'),
        ),
        migrations.AlterField(
            model_name='diarytemplate',
            name='category',
            field=models.CharField(max_length=50, verbose_name='模板分类'),
        ),
        migrations.AlterField(
            model_name='diarytemplate',
            name='description',
            field=models.TextField(verbose_name='模板描述'),
        ),
        migrations.AlterField(
            model_name='diarytemplate',
            name='name',
            field=models.CharField(max_length=100, verbose_name='模板名称'),
        ),
        migrations.AlterField(
            model_name='douyinvideo',
            name='comments',
            field=models.IntegerField(default=0, verbose_name='评论数'),
        ),
        migrations.AlterField(
            model_name='douyinvideo',
            name='likes',
            field=models.IntegerField(default=0, verbose_name='点赞数'),
        ),
        migrations.AlterField(
            model_name='douyinvideo',
            name='shares',
            field=models.IntegerField(default=0, verbose_name='分享数'),
        ),
        migrations.AlterField(
            model_name='douyinvideo',
            name='title',
            field=models.TextField(blank=True, null=True, verbose_name='视频标题'),
        ),
        migrations.AlterField(
            model_name='douyinvideo',
            name='video_id',
            field=models.CharField(default='', max_length=100, unique=True, verbose_name='视频ID'),
        ),
        migrations.AlterField(
            model_name='douyinvideo',
            name='video_url',
            field=models.URLField(default='', verbose_name='视频URL'),
        ),
        migrations.AlterField(
            model_name='fitnessachievementmodule',
            name='color',
            field=models.CharField(default='#667eea', max_length=7, verbose_name='主题颜色'),
        ),
        migrations.AlterField(
            model_name='fitnessachievementmodule',
            name='description',
            field=models.TextField(default='', verbose_name='模块描述'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='fitnessachievementmodule',
            name='name',
            field=models.CharField(choices=[('strength', '力量训练'), ('cardio', '有氧运动'), ('nutrition', '营养管理'), ('consistency', '连续性'), ('social', '社交互动'), ('milestone', '里程碑'), ('special', '特殊成就')], max_length=50, unique=True, verbose_name='模块名称'),
        ),
        migrations.AlterField(
            model_name='fitnessfollow',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='使用时间'),
        ),
        migrations.AlterField(
            model_name='heartlinkrequest',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='heartlinkrequest',
            name='requester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heart_link_requests', to=settings.AUTH_USER_MODEL, verbose_name='请求者'),
        ),
        migrations.AlterField(
            model_name='heartlinkrequest',
            name='status',
            field=models.CharField(choices=[('pending', '等待中'), ('matched', '已匹配'), ('expired', '已过期'), ('cancelled', '已取消')], default='pending', max_length=20, verbose_name='状态'),
        ),
        migrations.AlterField(
            model_name='lifecategory',
            name='color',
            field=models.CharField(default='#007bff', max_length=7, verbose_name='颜色'),
        ),
        migrations.AlterField(
            model_name='lifecategory',
            name='description',
            field=models.TextField(blank=True, verbose_name='描述'),
        ),
        migrations.AlterField(
            model_name='lifecategory',
            name='icon',
            field=models.CharField(blank=True, max_length=50, verbose_name='图标'),
        ),
        migrations.AlterField(
            model_name='lifecategory',
            name='name',
            field=models.CharField(max_length=100, verbose_name='分类名称'),
        ),
        migrations.AlterField(
            model_name='lifediaryentry',
            name='content',
            field=models.TextField(blank=True, verbose_name='内容'),
        ),
        migrations.AlterField(
            model_name='lifediaryentry',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='lifediaryentry',
            name='title',
            field=models.CharField(blank=True, max_length=200, verbose_name='标题'),
        ),
        migrations.AlterField(
            model_name='lifetag',
            name='name',
            field=models.CharField(max_length=50, verbose_name='标签名称'),
        ),
        migrations.AlterField(
            model_name='socialmediaplatformconfig',
            name='platform',
            field=models.CharField(max_length=20, unique=True, verbose_name='平台'),
        ),
        migrations.AlterField(
            model_name='useronlinestatus',
            name='current_room',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tools.chatroom', verbose_name='当前房间'),
        ),
        migrations.AlterField(
            model_name='useronlinestatus',
            name='is_online',
            field=models.BooleanField(default=False, verbose_name='是否在线'),
        ),
        migrations.AlterField(
            model_name='useronlinestatus',
            name='last_seen',
            field=models.DateTimeField(auto_now=True, verbose_name='最后在线时间'),
        ),
        migrations.AlterField(
            model_name='useronlinestatus',
            name='match_number',
            field=models.CharField(blank=True, db_index=True, max_length=4, null=True, verbose_name='匹配数字'),
        ),
        migrations.AlterField(
            model_name='useronlinestatus',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AlterUniqueTogether(
            name='lifecategory',
            unique_together={('user', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='lifediaryentry',
            unique_together={('user', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='lifetag',
            unique_together={('user', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='travelguidecache',
            unique_together={('destination', 'travel_style', 'budget_range', 'travel_duration', 'interests_hash')},
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['room_type', 'status'], name='tools_chatr_room_ty_f4a15a_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['last_activity'], name='tools_chatr_last_ac_cd4829_idx'),
        ),
        migrations.AddIndex(
            model_name='lifediaryentry',
            index=models.Index(fields=['user', 'is_private'], name='tools_lifed_user_id_e694ef_idx'),
        ),
        migrations.AddIndex(
            model_name='shipbaoitem',
            index=models.Index(fields=['location_city'], name='tools_shipb_locatio_100ebb_idx'),
        ),
        migrations.AddIndex(
            model_name='shipbaoitem',
            index=models.Index(fields=['latitude', 'longitude'], name='tools_shipb_latitud_d79bd5_idx'),
        ),
        migrations.DeleteModel(
            name='Achievement',
        ),
        migrations.DeleteModel(
            name='CapsuleUnlock',
        ),
        migrations.DeleteModel(
            name='MemoryFragment',
        ),
        migrations.DeleteModel(
            name='ParallelMatch',
        ),
        migrations.DeleteModel(
            name='TarotDiary',
        ),
        migrations.DeleteModel(
            name='TimeCapsule',
        ),
        migrations.AddField(
            model_name='workouttemplate',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='workouttemplate',
            name='exercises',
            field=models.ManyToManyField(through='tools.TemplateExercise', to='tools.exercise', verbose_name='包含动作'),
        ),
        migrations.AddField(
            model_name='workouttemplate',
            name='target_body_parts',
            field=models.ManyToManyField(to='tools.bodypart', verbose_name='目标部位'),
        ),
        migrations.AddField(
            model_name='usertrainingplan',
            name='plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.enhancedtrainingplan', verbose_name='训练计划'),
        ),
        migrations.AddField(
            model_name='usertrainingplan',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='userplancollection',
            name='plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.enhancedtrainingplan', verbose_name='训练计划'),
        ),
        migrations.AddField(
            model_name='userplancollection',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='userexercisepreference',
            name='exercise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.exercise', verbose_name='动作'),
        ),
        migrations.AddField(
            model_name='userexercisepreference',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='userbadgeshowcase',
            name='featured_badges',
            field=models.ManyToManyField(blank=True, related_name='featured_showcase', to='tools.enhanceduserfitnessachievement', verbose_name='精选徽章'),
        ),
        migrations.AddField(
            model_name='userbadgeshowcase',
            name='primary_badge',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_showcase', to='tools.enhanceduserfitnessachievement', verbose_name='主要徽章'),
        ),
        migrations.AddField(
            model_name='userbadgeshowcase',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='travelpostlike',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.travelpost', verbose_name='攻略'),
        ),
        migrations.AddField(
            model_name='travelpostlike',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='travelpostfavorite',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.travelpost', verbose_name='攻略'),
        ),
        migrations.AddField(
            model_name='travelpostfavorite',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='travelpostcomment',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tools.travelpostcomment', verbose_name='父评论'),
        ),
        migrations.AddField(
            model_name='travelpostcomment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.travelpost', verbose_name='攻略'),
        ),
        migrations.AddField(
            model_name='travelpostcomment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='travelpost',
            name='cities',
            field=models.ManyToManyField(to='tools.travelcity', verbose_name='关联城市'),
        ),
        migrations.AddField(
            model_name='travelpost',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建用户'),
        ),
        migrations.AlterUniqueTogether(
            name='travelcity',
            unique_together={('name', 'country')},
        ),
        migrations.AddField(
            model_name='trainingsession',
            name='user_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.usertrainingplan', verbose_name='用户计划'),
        ),
        migrations.AddField(
            model_name='templateexercise',
            name='exercise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.exercise', verbose_name='动作'),
        ),
        migrations.AddField(
            model_name='templateexercise',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.workouttemplate', verbose_name='训练模板'),
        ),
        migrations.AddField(
            model_name='shipbaoinquiry',
            name='buyer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipbao_inquiries', to=settings.AUTH_USER_MODEL, verbose_name='买家'),
        ),
        migrations.AddField(
            model_name='shipbaoinquiry',
            name='chat_room',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tools.chatroom', verbose_name='聊天室'),
        ),
        migrations.AddField(
            model_name='shipbaoinquiry',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inquiries', to='tools.shipbaoitem', verbose_name='商品'),
        ),
        migrations.AddField(
            model_name='shipbaoinquiry',
            name='seller',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_inquiries', to=settings.AUTH_USER_MODEL, verbose_name='卖家'),
        ),
        migrations.AddField(
            model_name='shipbaofavorite',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.shipbaoitem', verbose_name='商品'),
        ),
        migrations.AddField(
            model_name='shipbaofavorite',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='planlibrary',
            name='added_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='添加者'),
        ),
        migrations.AddField(
            model_name='planlibrary',
            name='plan',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tools.enhancedtrainingplan', verbose_name='训练计划'),
        ),
        migrations.AddField(
            model_name='legacyrelationshiptag',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='legacyrelationshipstatistics',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='legacyrelationshipreminder',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='tools.legacypersonprofile', verbose_name='相关人物'),
        ),
        migrations.AddField(
            model_name='legacyrelationshipreminder',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='legacypersonprofile',
            name='mutual_friends',
            field=models.ManyToManyField(blank=True, to='tools.legacypersonprofile', verbose_name='共同好友'),
        ),
        migrations.AddField(
            model_name='legacypersonprofile',
            name='relationship_tags',
            field=models.ManyToManyField(blank=True, to='tools.legacyrelationshiptag', verbose_name='关系标签'),
        ),
        migrations.AddField(
            model_name='legacypersonprofile',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='legacyinteraction',
            name='other_participants',
            field=models.ManyToManyField(blank=True, related_name='group_interactions', to='tools.legacypersonprofile', verbose_name='其他参与者'),
        ),
        migrations.AddField(
            model_name='legacyinteraction',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='tools.legacypersonprofile', verbose_name='相关人物'),
        ),
        migrations.AddField(
            model_name='legacyinteraction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='legacyimportantmoment',
            name='other_participants',
            field=models.ManyToManyField(blank=True, related_name='shared_moments', to='tools.legacypersonprofile', verbose_name='其他参与者'),
        ),
        migrations.AddField(
            model_name='legacyimportantmoment',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='important_moments', to='tools.legacypersonprofile', verbose_name='相关人物'),
        ),
        migrations.AddField(
            model_name='legacyimportantmoment',
            name='related_interaction',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tools.legacyinteraction', verbose_name='关联互动记录'),
        ),
        migrations.AddField(
            model_name='legacyimportantmoment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='exerciseset',
            name='exercise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.exercise', verbose_name='动作'),
        ),
        migrations.AddField(
            model_name='exerciseset',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.trainingsession', verbose_name='训练会话'),
        ),
        migrations.AddField(
            model_name='exerciserating',
            name='exercise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.exercise', verbose_name='动作'),
        ),
        migrations.AddField(
            model_name='exerciserating',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='body_parts',
            field=models.ManyToManyField(to='tools.bodypart', verbose_name='目标部位'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='equipment',
            field=models.ManyToManyField(blank=True, to='tools.equipment', verbose_name='所需器械'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='prerequisites',
            field=models.ManyToManyField(blank=True, related_name='advanced_versions', to='tools.exercise', verbose_name='前置动作'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='primary_muscles',
            field=models.ManyToManyField(related_name='primary_exercises', to='tools.musclegroup', verbose_name='主要肌肉群'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='secondary_muscles',
            field=models.ManyToManyField(blank=True, related_name='secondary_exercises', to='tools.musclegroup', verbose_name='辅助肌肉群'),
        ),
        migrations.AddField(
            model_name='enhancedworkoutdashboard',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancedweighttracking',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancedtrainingplan',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tools.trainingplancategory', verbose_name='计划分类'),
        ),
        migrations.AddField(
            model_name='enhancedtrainingplan',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_plans', to=settings.AUTH_USER_MODEL, verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='enhancedtrainingplan',
            name='exercise_library',
            field=models.ManyToManyField(blank=True, to='tools.exercise', verbose_name='动作库'),
        ),
        migrations.AddField(
            model_name='enhancedtrainingplan',
            name='target_body_parts',
            field=models.ManyToManyField(blank=True, to='tools.bodypart', verbose_name='目标部位'),
        ),
        migrations.AddField(
            model_name='enhancedtrainingplan',
            name='users',
            field=models.ManyToManyField(through='tools.UserTrainingPlan', to=settings.AUTH_USER_MODEL, verbose_name='使用用户'),
        ),
        migrations.AddField(
            model_name='enhancedpaincurrency',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancednutritionreminder',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancedmeallog',
            name='meal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.enhancedmeal', verbose_name='计划餐食'),
        ),
        migrations.AddField(
            model_name='enhancedmeallog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancedmeal',
            name='plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.enhanceddietplan', verbose_name='饮食计划'),
        ),
        migrations.AddField(
            model_name='enhancedfitnessworkoutsession',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancedfitnessstrengthprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancedexhaustionproof',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancedexerciseweightrecord',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhanceddietplan',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhanceddailyworkoutchallenge',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancedcopilotcollaboration',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancedcodeworkoutsession',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='enhancedaidependencymeter',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='chatroommember',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.chatroom', verbose_name='聊天室'),
        ),
        migrations.AddField(
            model_name='chatroommember',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='chatnotification',
            name='message',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.chatmessage', verbose_name='消息'),
        ),
        migrations.AddField(
            model_name='chatnotification',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.chatroom', verbose_name='聊天室'),
        ),
        migrations.AddField(
            model_name='chatnotification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='bodypart',
            name='muscle_groups',
            field=models.ManyToManyField(to='tools.musclegroup', verbose_name='包含肌肉群'),
        ),
        migrations.AddField(
            model_name='achievementunlocklog',
            name='achievement',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.enhancedfitnessachievement', verbose_name='成就'),
        ),
        migrations.AddField(
            model_name='achievementunlocklog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.RemoveField(
            model_name='lifecategory',
            name='updated_at',
        ),
        migrations.RemoveField(
            model_name='lifediaryentry',
            name='mood_note',
        ),
        migrations.RemoveField(
            model_name='lifediaryentry',
            name='music_recommendation',
        ),
        migrations.RemoveField(
            model_name='lifediaryentry',
            name='question_answers',
        ),
        migrations.RemoveField(
            model_name='lifetag',
            name='color',
        ),
        migrations.RemoveField(
            model_name='lifetag',
            name='description',
        ),
        migrations.RemoveField(
            model_name='lifetag',
            name='is_active',
        ),
        migrations.RemoveField(
            model_name='lifetag',
            name='updated_at',
        ),
        migrations.RemoveField(
            model_name='travelguidecache',
            name='last_accessed',
        ),
        migrations.AlterUniqueTogether(
            name='usertrainingplan',
            unique_together={('user', 'plan')},
        ),
        migrations.AlterUniqueTogether(
            name='userplancollection',
            unique_together={('user', 'plan')},
        ),
        migrations.AlterUniqueTogether(
            name='userexercisepreference',
            unique_together={('user', 'exercise')},
        ),
        migrations.AlterUniqueTogether(
            name='travelpostlike',
            unique_together={('user', 'post')},
        ),
        migrations.AlterUniqueTogether(
            name='travelpostfavorite',
            unique_together={('user', 'post')},
        ),
        migrations.AddIndex(
            model_name='trainingsession',
            index=models.Index(fields=['user_plan', 'status'], name='tools_train_user_pl_16f6fa_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingsession',
            index=models.Index(fields=['scheduled_date'], name='tools_train_schedul_f93d0d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='templateexercise',
            unique_together={('template', 'exercise', 'exercise_order')},
        ),
        migrations.AddIndex(
            model_name='shipbaoinquiry',
            index=models.Index(fields=['item', 'status'], name='tools_shipb_item_id_017fee_idx'),
        ),
        migrations.AddIndex(
            model_name='shipbaoinquiry',
            index=models.Index(fields=['seller', 'status', 'created_at'], name='tools_shipb_seller__4d172c_idx'),
        ),
        migrations.AddIndex(
            model_name='shipbaoinquiry',
            index=models.Index(fields=['buyer', 'status'], name='tools_shipb_buyer_i_9b5673_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='shipbaoinquiry',
            unique_together={('item', 'buyer')},
        ),
        migrations.AlterUniqueTogether(
            name='shipbaofavorite',
            unique_together={('user', 'item')},
        ),
        migrations.AlterUniqueTogether(
            name='legacypersonprofile',
            unique_together={('user', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='exerciserating',
            unique_together={('user', 'exercise')},
        ),
        migrations.AddIndex(
            model_name='exercise',
            index=models.Index(fields=['difficulty', 'exercise_type'], name='tools_exerc_difficu_8fc303_idx'),
        ),
        migrations.AddIndex(
            model_name='exercise',
            index=models.Index(fields=['popularity_score'], name='tools_exerc_popular_a53eb3_idx'),
        ),
        migrations.AddIndex(
            model_name='exercise',
            index=models.Index(fields=['is_active', 'is_featured'], name='tools_exerc_is_acti_a29137_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedtrainingplan',
            index=models.Index(fields=['creator', 'status'], name='tools_enhan_creator_5339a2_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedtrainingplan',
            index=models.Index(fields=['plan_type', 'difficulty'], name='tools_enhan_plan_ty_c8be54_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedtrainingplan',
            index=models.Index(fields=['visibility', 'published_at'], name='tools_enhan_visibil_245e8f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='enhancedpaincurrency',
            unique_together={('user', 'currency_type')},
        ),
        migrations.AlterUniqueTogether(
            name='enhanceddailyworkoutchallenge',
            unique_together={('user', 'date')},
        ),
        migrations.AddIndex(
            model_name='chatroommember',
            index=models.Index(fields=['room', 'role'], name='tools_chatr_room_id_d757dc_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroommember',
            index=models.Index(fields=['user', 'joined_at'], name='tools_chatr_user_id_c97988_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chatroommember',
            unique_together={('room', 'user')},
        ),
        migrations.AddIndex(
            model_name='chatnotification',
            index=models.Index(fields=['user', 'is_read'], name='tools_chatn_user_id_388b18_idx'),
        ),
        migrations.AddIndex(
            model_name='chatnotification',
            index=models.Index(fields=['room', 'is_read'], name='tools_chatn_room_id_e4a0f1_idx'),
        ),
    ]
