# Generated by Django 4.2.23 on 2025-08-15 15:11

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tools', '0045_travelguideusage_usergeneratedtravelguide_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='BuddyEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='活动标题')),
                ('description', models.TextField(verbose_name='活动描述')),
                ('event_type', models.CharField(choices=[('meal', '饭搭'), ('sports', '球搭'), ('travel', '旅行搭'), ('study', '学习搭'), ('game', '游戏搭'), ('movie', '电影搭'), ('shopping', '购物搭'), ('coffee', '咖啡搭'), ('other', '其他')], max_length=20, verbose_name='活动类型')),
                ('start_time', models.DateTimeField(verbose_name='开始时间')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('location', models.CharField(max_length=200, verbose_name='活动地点')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='纬度')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='经度')),
                ('max_members', models.IntegerField(default=4, verbose_name='人数上限')),
                ('cost_type', models.CharField(choices=[('free', '免费'), ('aa', 'AA制')], default='aa', max_length=20, verbose_name='费用类型')),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='预估费用')),
                ('gender_restriction', models.CharField(choices=[('none', '不限'), ('male', '仅限男性'), ('female', '仅限女性')], default='none', max_length=20, verbose_name='性别限制')),
                ('age_min', models.IntegerField(blank=True, null=True, verbose_name='最小年龄')),
                ('age_max', models.IntegerField(blank=True, null=True, verbose_name='最大年龄')),
                ('status', models.CharField(choices=[('active', '招募中'), ('full', '人数已满'), ('in_progress', '进行中'), ('completed', '已结束'), ('cancelled', '已取消')], default='active', max_length=20, verbose_name='活动状态')),
                ('view_count', models.IntegerField(default=0, verbose_name='浏览次数')),
                ('application_count', models.IntegerField(default=0, verbose_name='申请次数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='发起人')),
            ],
            options={
                'verbose_name': '搭子活动',
                'verbose_name_plural': '搭子活动',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BuddyEventChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='是否活跃')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chat', to='tools.buddyevent', verbose_name='活动')),
            ],
            options={
                'verbose_name': '搭子活动群聊',
                'verbose_name_plural': '搭子活动群聊',
            },
        ),
        migrations.CreateModel(
            name='ShipBaoItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='物品标题')),
                ('description', models.TextField(verbose_name='物品描述')),
                ('category', models.CharField(choices=[('electronics', '电子产品'), ('clothing', '服饰鞋包'), ('furniture', '家具家居'), ('books', '图书音像'), ('sports', '运动户外'), ('beauty', '美妆护肤'), ('toys', '玩具游戏'), ('food', '食品饮料'), ('other', '其他')], max_length=20, verbose_name='分类')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='价格(元)')),
                ('condition', models.IntegerField(choices=[(1, '1星 - 很旧'), (2, '2星 - 较旧'), (3, '3星 - 一般'), (4, '4星 - 较新'), (5, '5星 - 全新')], verbose_name='新旧程度')),
                ('images', models.JSONField(default=list, verbose_name='图片URL列表')),
                ('delivery_option', models.CharField(choices=[('pickup', '仅自提'), ('delivery', '仅送货'), ('both', '自提/送货')], default='pickup', max_length=20, verbose_name='交易方式')),
                ('can_bargain', models.BooleanField(default=False, verbose_name='是否可议价')),
                ('location', models.CharField(max_length=200, verbose_name='交易地点')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='纬度')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='经度')),
                ('status', models.CharField(choices=[('pending', '发布中'), ('reserved', '交易中'), ('completed', '已完成'), ('cancelled', '已取消')], default='pending', max_length=20, verbose_name='交易状态')),
                ('view_count', models.IntegerField(default=0, verbose_name='浏览次数')),
                ('favorite_count', models.IntegerField(default=0, verbose_name='收藏次数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='发布时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='卖家')),
            ],
            options={
                'verbose_name': '船宝物品',
                'verbose_name_plural': '船宝物品',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ShipBaoUserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_verified', models.BooleanField(default=False, verbose_name='是否实名认证')),
                ('real_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='真实姓名')),
                ('id_card_number', models.CharField(blank=True, max_length=18, null=True, verbose_name='身份证号')),
                ('verification_time', models.DateTimeField(blank=True, null=True, verbose_name='认证时间')),
                ('credit_score', models.IntegerField(default=100, verbose_name='信用评分')),
                ('total_transactions', models.IntegerField(default=0, verbose_name='总交易数')),
                ('successful_transactions', models.IntegerField(default=0, verbose_name='成功交易数')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='所在城市')),
                ('district', models.CharField(blank=True, max_length=50, null=True, verbose_name='所在区域')),
                ('notification_enabled', models.BooleanField(default=True, verbose_name='启用通知')),
                ('auto_accept_offers', models.BooleanField(default=False, verbose_name='自动接受报价')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '船宝用户资料',
                'verbose_name_plural': '船宝用户资料',
            },
        ),
        migrations.CreateModel(
            name='ShipBaoTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('initiated', '已发起'), ('negotiating', '协商中'), ('meeting_arranged', '已约定见面'), ('completed', '已完成'), ('cancelled', '已取消')], default='initiated', max_length=20, verbose_name='交易状态')),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='最终价格')),
                ('meeting_location', models.CharField(blank=True, max_length=200, null=True, verbose_name='见面地点')),
                ('meeting_time', models.DateTimeField(blank=True, null=True, verbose_name='见面时间')),
                ('buyer_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='买家评分')),
                ('seller_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='卖家评分')),
                ('buyer_comment', models.TextField(blank=True, null=True, verbose_name='买家评价')),
                ('seller_comment', models.TextField(blank=True, null=True, verbose_name='卖家评价')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='发起时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipbao_purchases', to=settings.AUTH_USER_MODEL, verbose_name='买家')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='tools.shipbaoitem', verbose_name='物品')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipbao_sales', to=settings.AUTH_USER_MODEL, verbose_name='卖家')),
            ],
            options={
                'verbose_name': '船宝交易',
                'verbose_name_plural': '船宝交易',
                'ordering': ['-created_at'],
                'unique_together': {('item', 'buyer')},
            },
        ),
        migrations.CreateModel(
            name='ShipBaoReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('fraud', '欺诈行为'), ('fake_info', '虚假信息'), ('inappropriate', '不当内容'), ('harassment', '骚扰行为'), ('other', '其他')], max_length=20, verbose_name='举报类型')),
                ('description', models.TextField(verbose_name='举报描述')),
                ('evidence', models.JSONField(default=list, verbose_name='证据材料')),
                ('status', models.CharField(choices=[('pending', '待处理'), ('investigating', '调查中'), ('resolved', '已处理'), ('dismissed', '已驳回')], default='pending', max_length=20, verbose_name='处理状态')),
                ('admin_notes', models.TextField(blank=True, null=True, verbose_name='管理员备注')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='举报时间')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='处理时间')),
                ('reported_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tools.shipbaoitem', verbose_name='被举报物品')),
                ('reported_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipbao_reported', to=settings.AUTH_USER_MODEL, verbose_name='被举报者')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipbao_reports', to=settings.AUTH_USER_MODEL, verbose_name='举报者')),
            ],
            options={
                'verbose_name': '船宝举报',
                'verbose_name_plural': '船宝举报',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ShipBaoMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('text', '文本'), ('image', '图片'), ('offer', '报价'), ('system', '系统消息')], default='text', max_length=20, verbose_name='消息类型')),
                ('content', models.TextField(verbose_name='消息内容')),
                ('image_url', models.URLField(blank=True, null=True, verbose_name='图片URL')),
                ('offer_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='报价金额')),
                ('is_read', models.BooleanField(default=False, verbose_name='是否已读')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='发送时间')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='发送者')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='tools.shipbaotransaction', verbose_name='交易')),
            ],
            options={
                'verbose_name': '船宝私信',
                'verbose_name_plural': '船宝私信',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='BuddyUserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interests', models.JSONField(default=list, verbose_name='兴趣标签')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='所在城市')),
                ('district', models.CharField(blank=True, max_length=50, null=True, verbose_name='所在区域')),
                ('created_events', models.IntegerField(default=0, verbose_name='发起活动数')),
                ('joined_events', models.IntegerField(default=0, verbose_name='参与活动数')),
                ('total_events', models.IntegerField(default=0, verbose_name='总活动数')),
                ('credit_score', models.IntegerField(default=100, verbose_name='信用评分')),
                ('no_show_count', models.IntegerField(default=0, verbose_name='爽约次数')),
                ('notification_enabled', models.BooleanField(default=True, verbose_name='启用通知')),
                ('auto_join_enabled', models.BooleanField(default=False, verbose_name='自动加入')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('blacklisted_users', models.ManyToManyField(blank=True, related_name='blacklisted_by', to=settings.AUTH_USER_MODEL, verbose_name='黑名单用户')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '搭子用户资料',
                'verbose_name_plural': '搭子用户资料',
            },
        ),
        migrations.CreateModel(
            name='BuddyEventReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='评分')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='评价内容')),
                ('punctuality', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='守时程度')),
                ('friendliness', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='友好程度')),
                ('participation', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='参与度')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='评价时间')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='tools.buddyevent', verbose_name='活动')),
                ('reviewed_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buddy_reviews_received', to=settings.AUTH_USER_MODEL, verbose_name='被评价者')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='评价者')),
            ],
            options={
                'verbose_name': '搭子活动评价',
                'verbose_name_plural': '搭子活动评价',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BuddyEventReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('no_show', '爽约'), ('inappropriate', '不当行为'), ('harassment', '骚扰'), ('fake_info', '虚假信息'), ('other', '其他')], max_length=20, verbose_name='举报类型')),
                ('description', models.TextField(verbose_name='举报描述')),
                ('evidence', models.JSONField(default=list, verbose_name='证据材料')),
                ('status', models.CharField(choices=[('pending', '待处理'), ('investigating', '调查中'), ('resolved', '已处理'), ('dismissed', '已驳回')], default='pending', max_length=20, verbose_name='处理状态')),
                ('admin_notes', models.TextField(blank=True, null=True, verbose_name='管理员备注')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='举报时间')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='处理时间')),
                ('reported_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tools.buddyevent', verbose_name='相关活动')),
                ('reported_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buddy_reported', to=settings.AUTH_USER_MODEL, verbose_name='被举报者')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buddy_reports', to=settings.AUTH_USER_MODEL, verbose_name='举报者')),
            ],
            options={
                'verbose_name': '搭子活动举报',
                'verbose_name_plural': '搭子活动举报',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BuddyEventMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('text', '文本'), ('image', '图片'), ('system', '系统消息')], default='text', max_length=20, verbose_name='消息类型')),
                ('content', models.TextField(verbose_name='消息内容')),
                ('image_url', models.URLField(blank=True, null=True, verbose_name='图片URL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='发送时间')),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='tools.buddyeventchat', verbose_name='群聊')),
                ('is_read_by', models.ManyToManyField(blank=True, related_name='read_messages', to=settings.AUTH_USER_MODEL, verbose_name='已读用户')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='发送者')),
            ],
            options={
                'verbose_name': '搭子活动消息',
                'verbose_name_plural': '搭子活动消息',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='BuddyEventMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', '待审核'), ('joined', '已加入'), ('rejected', '已拒绝'), ('left', '已退出')], default='pending', max_length=20, verbose_name='状态')),
                ('application_message', models.TextField(blank=True, null=True, verbose_name='申请留言')),
                ('applied_at', models.DateTimeField(auto_now_add=True, verbose_name='申请时间')),
                ('joined_at', models.DateTimeField(blank=True, null=True, verbose_name='加入时间')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='tools.buddyevent', verbose_name='活动')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '搭子活动成员',
                'verbose_name_plural': '搭子活动成员',
                'ordering': ['applied_at'],
            },
        ),
        migrations.AddIndex(
            model_name='shipbaoitem',
            index=models.Index(fields=['category', 'status'], name='tools_shipb_categor_821a66_idx'),
        ),
        migrations.AddIndex(
            model_name='shipbaoitem',
            index=models.Index(fields=['seller', 'status'], name='tools_shipb_seller__b19e78_idx'),
        ),
        migrations.AddIndex(
            model_name='shipbaoitem',
            index=models.Index(fields=['price'], name='tools_shipb_price_01b1ce_idx'),
        ),
        migrations.AddIndex(
            model_name='shipbaoitem',
            index=models.Index(fields=['created_at'], name='tools_shipb_created_d85820_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='buddyeventreview',
            unique_together={('event', 'reviewer', 'reviewed_user')},
        ),
        migrations.AlterUniqueTogether(
            name='buddyeventmember',
            unique_together={('event', 'user')},
        ),
        migrations.AddIndex(
            model_name='buddyevent',
            index=models.Index(fields=['event_type', 'status'], name='tools_buddy_event_t_41e23e_idx'),
        ),
        migrations.AddIndex(
            model_name='buddyevent',
            index=models.Index(fields=['creator', 'status'], name='tools_buddy_creator_62c9fd_idx'),
        ),
        migrations.AddIndex(
            model_name='buddyevent',
            index=models.Index(fields=['start_time'], name='tools_buddy_start_t_675d6f_idx'),
        ),
        migrations.AddIndex(
            model_name='buddyevent',
            index=models.Index(fields=['location'], name='tools_buddy_locatio_6f54c8_idx'),
        ),
    ]
