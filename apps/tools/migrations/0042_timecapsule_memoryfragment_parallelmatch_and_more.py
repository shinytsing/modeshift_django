# Generated by Django 4.2.23 on 2025-08-12 04:47

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tools', '0041_add_is_online_to_useronlinestatus'),
    ]

    operations = [
        migrations.CreateModel(
            name='TimeCapsule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField()),
                ('emotions', models.JSONField(default=list)),
                ('location', models.JSONField(blank=True, null=True)),
                ('weather', models.JSONField(blank=True, null=True)),
                ('keywords', models.JSONField(default=list)),
                ('capsule_type', models.CharField(choices=[('memory', '记忆胶囊'), ('wish', '愿望胶囊'), ('secret', '秘密胶囊')], default='memory', max_length=20)),
                ('unlock_condition', models.CharField(choices=[('time', '时间解锁'), ('location', '位置解锁'), ('event', '事件解锁')], default='time', max_length=20)),
                ('unlock_time', models.DateTimeField(blank=True, null=True)),
                ('unlock_location', models.JSONField(blank=True, null=True)),
                ('unlock_event', models.CharField(blank=True, max_length=200)),
                ('visibility', models.CharField(choices=[('private', '仅自己'), ('public', '公开分享'), ('anonymous', '匿名分享')], default='private', max_length=20)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('images', models.JSONField(default=list)),
                ('audio', models.URLField(blank=True)),
                ('is_locked', models.BooleanField(default=True)),
                ('is_unlocked', models.BooleanField(default=False)),
                ('unlock_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_capsules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '时光胶囊',
                'verbose_name_plural': '时光胶囊',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MemoryFragment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fragment_type', models.CharField(choices=[('text', '文字碎片'), ('image', '图片碎片'), ('audio', '音频碎片'), ('location', '位置碎片')], max_length=20)),
                ('content', models.TextField()),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('capsule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fragments', to='tools.timecapsule')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memory_fragments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '记忆碎片',
                'verbose_name_plural': '记忆碎片',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ParallelMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_date', models.DateField(auto_now_add=True)),
                ('keywords', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parallel_matches_1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parallel_matches_2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '平行匹配',
                'verbose_name_plural': '平行匹配',
                'ordering': ['-match_date'],
                'unique_together': {('user1', 'user2', 'match_date')},
            },
        ),
        migrations.CreateModel(
            name='CapsuleUnlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('location', models.JSONField(blank=True, null=True)),
                ('capsule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlocks', to='tools.timecapsule')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlocked_capsules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '胶囊解锁记录',
                'verbose_name_plural': '胶囊解锁记录',
                'ordering': ['-unlocked_at'],
                'unique_together': {('capsule', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement_type', models.CharField(choices=[('traveler', '时光旅人'), ('explorer', '城市探险家'), ('prophet', '预言家'), ('collector', '记忆收藏家')], max_length=20)),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('progress', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '成就',
                'verbose_name_plural': '成就',
                'ordering': ['-unlocked_at'],
                'unique_together': {('user', 'achievement_type')},
            },
        ),
    ]
